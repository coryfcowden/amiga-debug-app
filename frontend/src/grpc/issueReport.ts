// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "issueReport.proto" (package "issue", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message issue.issueRequest
 */
export interface issueRequest {
    /**
     * @generated from protobuf field: string userEmail = 1
     */
    userEmail: string;
    /**
     * @generated from protobuf field: string userDescription = 2
     */
    userDescription: string;
    /**
     * @generated from protobuf field: string category = 3
     */
    category: string;
    /**
     * @generated from protobuf field: string subCategory = 4
     */
    subCategory: string;
    /**
     * @generated from protobuf field: bool urgent = 5
     */
    urgent: boolean; // add link?
    /**
     * @generated from protobuf field: string timestamp = 6
     */
    timestamp: string;
    /**
     * @generated from protobuf field: string location = 7
     */
    location: string;
    /**
     * @generated from protobuf field: string motorData = 8
     */
    motorData: string;
}
/**
 * @generated from protobuf message issue.issueResponse
 */
export interface issueResponse {
    /**
     * @generated from protobuf field: bool success = 1
     */
    success: boolean;
    /**
     * @generated from protobuf field: string message = 2
     */
    message: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class issueRequest$Type extends MessageType<issueRequest> {
    constructor() {
        super("issue.issueRequest", [
            { no: 1, name: "userEmail", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "userDescription", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "category", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "subCategory", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "urgent", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "timestamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "location", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "motorData", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<issueRequest>): issueRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userEmail = "";
        message.userDescription = "";
        message.category = "";
        message.subCategory = "";
        message.urgent = false;
        message.timestamp = "";
        message.location = "";
        message.motorData = "";
        if (value !== undefined)
            reflectionMergePartial<issueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: issueRequest): issueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string userEmail */ 1:
                    message.userEmail = reader.string();
                    break;
                case /* string userDescription */ 2:
                    message.userDescription = reader.string();
                    break;
                case /* string category */ 3:
                    message.category = reader.string();
                    break;
                case /* string subCategory */ 4:
                    message.subCategory = reader.string();
                    break;
                case /* bool urgent */ 5:
                    message.urgent = reader.bool();
                    break;
                case /* string timestamp */ 6:
                    message.timestamp = reader.string();
                    break;
                case /* string location */ 7:
                    message.location = reader.string();
                    break;
                case /* string motorData */ 8:
                    message.motorData = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: issueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string userEmail = 1; */
        if (message.userEmail !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userEmail);
        /* string userDescription = 2; */
        if (message.userDescription !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userDescription);
        /* string category = 3; */
        if (message.category !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.category);
        /* string subCategory = 4; */
        if (message.subCategory !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.subCategory);
        /* bool urgent = 5; */
        if (message.urgent !== false)
            writer.tag(5, WireType.Varint).bool(message.urgent);
        /* string timestamp = 6; */
        if (message.timestamp !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.timestamp);
        /* string location = 7; */
        if (message.location !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.location);
        /* string motorData = 8; */
        if (message.motorData !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.motorData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message issue.issueRequest
 */
export const issueRequest = new issueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class issueResponse$Type extends MessageType<issueResponse> {
    constructor() {
        super("issue.issueResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<issueResponse>): issueResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<issueResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: issueResponse): issueResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: issueResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message issue.issueResponse
 */
export const issueResponse = new issueResponse$Type();
/**
 * @generated ServiceType for protobuf service issue.issueReporter
 */
export const issueReporter = new ServiceType("issue.issueReporter", [
    { name: "ReportIssue", options: {}, I: issueRequest, O: issueResponse }
]);
